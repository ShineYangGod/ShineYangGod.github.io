<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://shineyanggod.github.io/</id>
    <title>ShineYang</title>
    <updated>2020-10-19T03:56:26.279Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://shineyanggod.github.io/"/>
    <link rel="self" href="https://shineyanggod.github.io/atom.xml"/>
    <subtitle>&lt;i&gt;the purpose of living is to change the world&lt;i&gt;</subtitle>
    <logo>https://shineyanggod.github.io/images/avatar.png</logo>
    <icon>https://shineyanggod.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, ShineYang</rights>
    <entry>
        <title type="html"><![CDATA[Go实战项目【一】Golang和Gin框架的安装和使用]]></title>
        <id>https://shineyanggod.github.io/post/go-shi-zhan-xiang-mu-yi-golang-he-gin-kuang-jia-de-an-zhuang-he-shi-yong/</id>
        <link href="https://shineyanggod.github.io/post/go-shi-zhan-xiang-mu-yi-golang-he-gin-kuang-jia-de-an-zhuang-he-shi-yong/">
        </link>
        <updated>2020-10-15T02:13:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="golang的安装">Golang的安装</h3>
<p>根据所使用的电脑操作系统，下载相对应的版本<a href="https://studygolang.com/dl">Golang</a> 下载<br>
比如我的电脑是macOS系统，下载的是</p>
<figure data-type="image" tabindex="1"><img src="https://shineyanggod.github.io//post-images/1602728774979.png" alt="" loading="lazy"></figure>
<p>安装完毕后配置路径<br>
打开终端，执行:</p>
<pre><code>vi ~/.bash_profile 
</code></pre>
<p><code>.bash_profile</code> 添加的内容如下：</p>
<pre><code>#Go
export GOROOT=/usr/local/go
export PATH=$PATH:$GOROOT/bin
</code></pre>
<p>然后执行</p>
<pre><code>source ~/.bash_profile 
</code></pre>
<p>让配置生效<br>
执行</p>
<pre><code>go version
</code></pre>
<p>查看Golang是否安装成功，出现以下信息即为安装成功<br>
<img src="https://shineyanggod.github.io//post-images/1602729021295.png" alt="" loading="lazy"></p>
<h4 id="初始化项目目录">初始化项目目录</h4>
<p>选一个你自己喜欢的路径，创建一个文件夹，比如我的是/Users/newmac/Documents/Go-app这个文件夹下</p>
<pre><code>cd /Users/newmac/Documents/Go-app
mkdir api &amp;&amp; cd api
go env -w GO111MODULE=on
go env -w GOPROXY=https://goproxy.cn,direct
go mod init api
</code></pre>
<p><code>mkdir api &amp;&amp; cd api</code>：创建并进入api文件夹<br>
<code>go env -w GO111MODULE=on</code>：开启Go modules<br>
<code>go env -w GOPROXY=https://goproxy.cn,direct</code>：设置 GOPROXY 代理，也可以把GOPROXY写入<code>.bash_profile</code>中<br>
<code>go mod init [MODULE_PATH]</code>：初始化 Go modules，它将会生成 go.mod 文件，MODULE_PATH 填写的是模块引入路径，如果想要把项目放到Github上，可以填写GitHub的项目路径，这个根据自己情况填写。<br>
然后就会在api文件夹下出现go.mod文件<br>
<img src="https://shineyanggod.github.io//post-images/1602729136409.png" alt="" loading="lazy"></p>
<h4 id="安装gin框架">安装Gin框架</h4>
<p>在<code>api</code>文件夹下，执行</p>
<pre><code>go get -u github.com/gin-gonic/gin
</code></pre>
<p>安装完毕后，创建一个<code>test.go</code>文件，测试下Gin框架是否能使用<code>test.go</code><br>
<img src="https://shineyanggod.github.io//post-images/1602729230872.png" alt="" loading="lazy"></p>
<p><mark>我用的是GoLang开发工具，可以直接在编译器里面执行</mark></p>
<p>如果用的是VS code，可以在终端运行:<code>go run test.go</code><br>
在浏览器打开127.0.0.1:8080/ping这个地址，可以看到有返回的数据，代表Gin框架安装和使用成功。<br>
<img src="https://shineyanggod.github.io//post-images/1602729526136.png" alt="" loading="lazy"></p>
<h2 id="go相关学习知识"><a href="https://wizardforcel.gitbooks.io/go42/content/content/42_1_install.html">Go相关学习知识</a></h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[清理Xcode占用的Mac硬盘空间]]></title>
        <id>https://shineyanggod.github.io/post/qing-li-xcode-zhan-yong-de-mac-ying-pan-kong-jian/</id>
        <link href="https://shineyanggod.github.io/post/qing-li-xcode-zhan-yong-de-mac-ying-pan-kong-jian/">
        </link>
        <updated>2020-09-25T01:30:13.000Z</updated>
        <content type="html"><![CDATA[<p>主要是操作两个目录下的文件 ~/Library/Developer/Xcode 和 ~/Library/Developer/CoreSimulator</p>
<h3 id="~librarydeveloperxcode">~/Library/Developer/Xcode</h3>
<h4 id="1-deriveddata">1、DerivedData</h4>
<pre><code>此文件夹内的每个目录是Xcode运行每个APP时生成的缓存文件，删除之后再运行APP会重新生成该APP对应的文件，只是编译时间变长了。
可保留近期运行的APP相关的文件夹，对于以前运行过近期不再使用的APP，例如网上下载的demo，建议清理。
Archives
此文件夹中的内容对应Xcode-&gt;Window-&gt;Organizer-&gt;Archives中列出的打包文件。
可保留有用的打包文件，其它删除。
iOS DeviceSupport
此文件夹存放的是Xcode对你所连接真机的版本支持，每个文件夹几乎都是几个G的大小（我个人的情况是11个目录占了26G空间），手机每升级一个版本，再次连接Xcode时，这里都会生成一个目录。
建议保留你手机当前版本的文件夹。全部删除也没关系，手机再次连接Xcode时会重新生成。
</code></pre>
<h4 id="2-~librarydevelopercoresimulator">2. ~/Library/Developer/CoreSimulator</h4>
<pre><code>Devices
此文件夹下的目录是以模拟器的UDID命名的，运行模拟器时每安装一个新的APP，相应的文件夹内容也会增大，就像手机上安装应用会占用手机空间一样。
</code></pre>
<p>可删除全部文件夹。再次运行模拟器，会重新生成。<br>
删除后开启Xcode运行模拟器，可能会出现下面的错误，不要惊慌，重启Xcode就好了。<br>
<img src="https://shineyanggod.github.io//post-images/1600997815748.png" alt="" loading="lazy"></p>
<p><mark>建议在退出Xcode后进行清理，清理后重启电脑</mark></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[iOS 13：Swift以编程方式设置应用程序根视图控制器不起作用]]></title>
        <id>https://shineyanggod.github.io/post/ios-13swift-yi-bian-cheng-fang-shi-she-zhi-ying-yong-cheng-xu-gen-shi-tu-kong-zhi-qi-bu-qi-zuo-yong/</id>
        <link href="https://shineyanggod.github.io/post/ios-13swift-yi-bian-cheng-fang-shi-she-zhi-ying-yong-cheng-xu-gen-shi-tu-kong-zhi-qi-bu-qi-zuo-yong/">
        </link>
        <updated>2020-09-21T05:54:11.000Z</updated>
        <content type="html"><![CDATA[<p>在iOS以后直接使用window?.makeKeyAndVisible()是不起作用的，正确用法是:</p>
<pre><code>static func redirectToMainNavRVC(currentVC: UIViewController){
        let appDelegate = UIApplication.shared.delegate as! AppDelegate
        let vc = UIStoryboard(name: appDelegate.storyBoardName, bundle: nil).instantiateViewController(withIdentifier: &quot;MainNavigationViewController&quot;) as! MainNavigationViewController
    if #available(iOS 13.0, *){
        if let scene = UIApplication.shared.connectedScenes.first{
            guard let windowScene = (scene as? UIWindowScene) else { return }
            print(&quot;&gt;&gt;&gt; windowScene: \(windowScene)&quot;)
            let window: UIWindow = UIWindow(frame: windowScene.coordinateSpace.bounds)
            window.windowScene = windowScene //Make sure to do this
            window.rootViewController = vc
            window.makeKeyAndVisible()
            appDelegate.window = window
        }
    } else {
        appDelegate.window?.rootViewController = vc
        appDelegate.window?.makeKeyAndVisible()
    }
}
</code></pre>
]]></content>
    </entry>
</feed>