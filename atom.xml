<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://shineyanggod.github.io/</id>
    <title>ShineYang</title>
    <updated>2020-10-19T08:49:24.222Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://shineyanggod.github.io/"/>
    <link rel="self" href="https://shineyanggod.github.io/atom.xml"/>
    <subtitle>&lt;i&gt;the purpose of living is to change the world&lt;i&gt;</subtitle>
    <logo>https://shineyanggod.github.io/images/avatar.png</logo>
    <icon>https://shineyanggod.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, ShineYang</rights>
    <entry>
        <title type="html"><![CDATA[Swift  从子视图跳转到指定tabBar主界面]]></title>
        <id>https://shineyanggod.github.io/post/swift-cong-zi-shi-tu-tiao-zhuan-dao-zhi-ding-tabbar-zhu-jie-mian/</id>
        <link href="https://shineyanggod.github.io/post/swift-cong-zi-shi-tu-tiao-zhuan-dao-zhi-ding-tabbar-zhu-jie-mian/">
        </link>
        <updated>2020-10-19T08:48:21.000Z</updated>
        <content type="html"><![CDATA[<p>从tabbar的子页面跳转到指定的tabbar主页面,话不多说直接上代码:</p>
<pre><code>self.navigationController?.tabBarController?.selectedIndex = 0
self.navigationController?.popViewController(animated: false)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Swift UICollectionView横向分页滚动，cell左右排版]]></title>
        <id>https://shineyanggod.github.io/post/swift-uicollectionview-heng-xiang-fen-ye-gun-dong-cell-zuo-you-pai-ban/</id>
        <link href="https://shineyanggod.github.io/post/swift-uicollectionview-heng-xiang-fen-ye-gun-dong-cell-zuo-you-pai-ban/">
        </link>
        <updated>2020-10-19T08:40:53.000Z</updated>
        <summary type="html"><![CDATA[<p>废话不多说，直接上代码</p>
<pre><code>自定义一个SYitemViewLayout，继承UICollectionViewFlowLayout
</code></pre>
<pre><code>mport UIKit

//根据需求设置列跟行
let kEmotionCellNumberOfOneRow = 3
let kEmotionCellRow = 2

class SYitemViewLayout: UICollectionViewFlowLayout {
    
    // 保存所有item
    fileprivate var attributesArr: [UICollectionViewLayoutAttributes] = []
    
    // MARK:- 重新布局
     override func prepare() {
         super.prepare()
         
         let itemWH: CGFloat = (kScreenWitdh - 30) / CGFloat(kEmotionCellNumberOfOneRow)
         
         // 设置itemSize
         itemSize = CGSize(width: itemWH, height: itemWH - 50)
         minimumLineSpacing = 0
         minimumInteritemSpacing = 0
         scrollDirection = .horizontal
         
         // 设置collectionView属性
         collectionView?.isPagingEnabled = true
         collectionView?.showsHorizontalScrollIndicator = false
         collectionView?.showsVerticalScrollIndicator = true
//         let insertMargin = (collectionView!.bounds.height - 3 * itemWH) * 0.5
//        collectionView?.contentInset = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)
         
         var page = 0
         let itemsCount = collectionView?.numberOfItems(inSection: 0) ?? 0
         for itemIndex in 0..&lt;itemsCount {
             let indexPath = IndexPath(item: itemIndex, section: 0)
             let attributes = UICollectionViewLayoutAttributes(forCellWith: indexPath)
             
             page = itemIndex / (kEmotionCellNumberOfOneRow * kEmotionCellRow)
             // 通过一系列计算, 得到x, y值
             let x = itemSize.width * CGFloat(itemIndex % Int(kEmotionCellNumberOfOneRow)) + (CGFloat(page) * (kScreenWitdh - 30))
             let y = itemSize.height * CGFloat((itemIndex - page * kEmotionCellRow * kEmotionCellNumberOfOneRow) / kEmotionCellNumberOfOneRow)
             
             attributes.frame = CGRect(x: x, y: y, width: itemSize.width, height: itemSize.height)
             // 把每一个新的属性保存起来
             attributesArr.append(attributes)
         }
         
     }
     
     override func layoutAttributesForElements(in rect: CGRect) -&gt; [UICollectionViewLayoutAttributes]? {
         var rectAttributes: [UICollectionViewLayoutAttributes] = []
         _ = attributesArr.map({
             if rect.contains($0.frame) {
                 rectAttributes.append($0)
             }
         })
         return rectAttributes
     }
}
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<p>废话不多说，直接上代码</p>
<pre><code>自定义一个SYitemViewLayout，继承UICollectionViewFlowLayout
</code></pre>
<pre><code>mport UIKit

//根据需求设置列跟行
let kEmotionCellNumberOfOneRow = 3
let kEmotionCellRow = 2

class SYitemViewLayout: UICollectionViewFlowLayout {
    
    // 保存所有item
    fileprivate var attributesArr: [UICollectionViewLayoutAttributes] = []
    
    // MARK:- 重新布局
     override func prepare() {
         super.prepare()
         
         let itemWH: CGFloat = (kScreenWitdh - 30) / CGFloat(kEmotionCellNumberOfOneRow)
         
         // 设置itemSize
         itemSize = CGSize(width: itemWH, height: itemWH - 50)
         minimumLineSpacing = 0
         minimumInteritemSpacing = 0
         scrollDirection = .horizontal
         
         // 设置collectionView属性
         collectionView?.isPagingEnabled = true
         collectionView?.showsHorizontalScrollIndicator = false
         collectionView?.showsVerticalScrollIndicator = true
//         let insertMargin = (collectionView!.bounds.height - 3 * itemWH) * 0.5
//        collectionView?.contentInset = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)
         
         var page = 0
         let itemsCount = collectionView?.numberOfItems(inSection: 0) ?? 0
         for itemIndex in 0..&lt;itemsCount {
             let indexPath = IndexPath(item: itemIndex, section: 0)
             let attributes = UICollectionViewLayoutAttributes(forCellWith: indexPath)
             
             page = itemIndex / (kEmotionCellNumberOfOneRow * kEmotionCellRow)
             // 通过一系列计算, 得到x, y值
             let x = itemSize.width * CGFloat(itemIndex % Int(kEmotionCellNumberOfOneRow)) + (CGFloat(page) * (kScreenWitdh - 30))
             let y = itemSize.height * CGFloat((itemIndex - page * kEmotionCellRow * kEmotionCellNumberOfOneRow) / kEmotionCellNumberOfOneRow)
             
             attributes.frame = CGRect(x: x, y: y, width: itemSize.width, height: itemSize.height)
             // 把每一个新的属性保存起来
             attributesArr.append(attributes)
         }
         
     }
     
     override func layoutAttributesForElements(in rect: CGRect) -&gt; [UICollectionViewLayoutAttributes]? {
         var rectAttributes: [UICollectionViewLayoutAttributes] = []
         _ = attributesArr.map({
             if rect.contains($0.frame) {
                 rectAttributes.append($0)
             }
         })
         return rectAttributes
     }
}
</code></pre>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Swift框架-章：1、开发一个Swift框架]]></title>
        <id>https://shineyanggod.github.io/post/swift-kuang-jia-zhang-1kai-fa-yi-ge-swift-kuang-jia/</id>
        <link href="https://shineyanggod.github.io/post/swift-kuang-jia-zhang-1kai-fa-yi-ge-swift-kuang-jia/">
        </link>
        <updated>2020-10-19T08:33:52.000Z</updated>
        <summary type="html"><![CDATA[<p>Swift已成为一种流行的编程语言，并且每天都在发展。<br>
开发Swift框架具有以下优点。<br>
隐藏您的代码实现。<br>
由于.framework文件已经编译，因此将减少重新编译并节省开发时间。<br>
这就是苹果公司使用的，例如：UIKit.framework。<br>
那么，您在寻找什么？让我们现在开始开发自己的Swift框架。</p>
<h3 id="开发swift框架具有以下优点">开发Swift框架具有以下优点。</h3>
<p>1、隐藏您的代码实现。<br>
2、由于.framework文件已经编译，因此将减少重新编译并节省开发时间。</p>
<p>这就是苹果公司使用的，例如：UIKit.framework。<br>
那么，您在寻找什么？让我们现在开始开发自己的Swift框架。<br>
使用的工具：XCode 11.6 +，Swift 5.1+<br>
步骤1：-安装框架项目</p>
<h5 id="1-创建新的xcode项目">1、创建新的XCode项目。</h5>
<figure data-type="image" tabindex="1"><img src="https://upload-images.jianshu.io/upload_images/2230644-032c56f68cbd7259.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图1" loading="lazy"></figure>
<p>#####2、 创建框架</p>
<figure data-type="image" tabindex="2"><img src="https://upload-images.jianshu.io/upload_images/2230644-b5c2237442f89f46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图2" loading="lazy"></figure>
<h6 id="为您的项目命名我们使用了类似于alamofire的alamowater名字-请确保选择语言-swift">为您的项目命名，我们使用了类似于Alamofire的AlamoWater名字。 （请确保选择语言-Swift）</h6>
<figure data-type="image" tabindex="3"><img src="https://upload-images.jianshu.io/upload_images/2230644-310af98148bbebd6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图3" loading="lazy"></figure>
<h6 id="单击目标内的alamowater文件夹然后按n">单击目标内的AlamoWater文件夹，然后按⌘+N。</h6>
<p>######选择文件名AlamoWater和以下子类：NSObject</p>
<figure data-type="image" tabindex="4"><img src="https://upload-images.jianshu.io/upload_images/2230644-9ba7d8e32b55ae48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图4" loading="lazy"></figure>
<p>在<strong>AlameWater.swift中</strong>添加以下代码**。**</p>
<p>**注意：-**确保您的类和方法设置为Public</p>
<pre><code>import UIKit

public protocol AlamoWaterProtocol {
    func didCallHello()
}

open class AlamoWater: NSObject {
    public static let shared = AlamoWater()
    
    public var delegate:AlamoWaterProtocol?
    
    open func hello(){
        debugPrint(&quot;Hello from AlamoWater!&quot;)
        AlamoWater.shared.delegate?.didCallHello()
    }
}

</code></pre>
<h6 id="要为ios设备和模拟器创建框架请向您的项目添加新的aggregate目标">要为iOS设备和模拟器创建框架，请向您的项目添加新的Aggregate目标。</h6>
<figure data-type="image" tabindex="5"><img src="https://upload-images.jianshu.io/upload_images/2230644-b618f5794d59501f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图5" loading="lazy"></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/2230644-4ae67e6fe40d2065.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图6" loading="lazy"><br>
<img src="https://upload-images.jianshu.io/upload_images/2230644-c19d65eb2e3295f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图7" loading="lazy"></p>
<figure data-type="image" tabindex="6"><img src="https://upload-images.jianshu.io/upload_images/2230644-29cf3ac7b2152920.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图8" loading="lazy"></figure>
<p>并添加[<strong>运行脚本</strong>]</p>
<figure data-type="image" tabindex="7"><img src="https://upload-images.jianshu.io/upload_images/2230644-d718d2788e1d1c54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图10" loading="lazy"></figure>
<pre><code>#!/bin/sh

UNIVERSAL_OUTPUTFOLDER=${BUILD_DIR}/${CONFIGURATION}-universal

# make sure the output directory exists
mkdir -p &quot;${UNIVERSAL_OUTPUTFOLDER}&quot;

# Step 1. Build Device and Simulator versions
xcodebuild -target &quot;AlamoWater&quot; ONLY_ACTIVE_ARCH=NO -configuration ${CONFIGURATION} -sdk iphoneos  BUILD_DIR=&quot;${BUILD_DIR}&quot; BUILD_ROOT=&quot;${BUILD_ROOT}&quot; clean build
xcodebuild -target &quot;AlamoWater&quot; -configuration ${CONFIGURATION} -sdk iphonesimulator ONLY_ACTIVE_ARCH=NO BUILD_DIR=&quot;${BUILD_DIR}&quot; BUILD_ROOT=&quot;${BUILD_ROOT}&quot; clean build

# Step 2. Copy the framework structure (from iphoneos build) to the universal folder
cp -R &quot;${BUILD_DIR}/${CONFIGURATION}-iphoneos/AlamoWater.framework&quot; &quot;${UNIVERSAL_OUTPUTFOLDER}/&quot;

# Step 3. Copy Swift modules from iphonesimulator build (if it exists) to the copied framework directory
SIMULATOR_SWIFT_MODULES_DIR=&quot;${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/AlamoWater.framework/Modules/AlamoWater.swiftmodule/.&quot;
if [ -d &quot;${SIMULATOR_SWIFT_MODULES_DIR}&quot; ]; then
cp -R &quot;${SIMULATOR_SWIFT_MODULES_DIR}&quot; &quot;${UNIVERSAL_OUTPUTFOLDER}/AlamoWater.framework/Modules/AlamoWater.swiftmodule&quot;
fi

# Step 4. Create universal binary file using lipo and place the combined executable in the copied framework directory
lipo -create -output &quot;${UNIVERSAL_OUTPUTFOLDER}/AlamoWater.framework/AlamoWater&quot; &quot;${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/AlamoWater.framework/AlamoWater&quot; &quot;${BUILD_DIR}/${CONFIGURATION}-iphoneos/AlamoWater.framework/AlamoWater&quot;

# Step 5. Convenience step to copy the framework to the project's directory
cp -R &quot;${UNIVERSAL_OUTPUTFOLDER}/AlamoWater.framework&quot; &quot;${PROJECT_DIR}&quot;

# Step 6. Convenience step to open the project's directory in Finder
open &quot;${PROJECT_DIR}&quot;
</code></pre>
<h3 id="注意alamowater改为自己项目的名字">注意：AlamoWater改为自己项目的名字</h3>
<p>通过按⌘+ B选择UniversalAlamoWater目标来构建您的第一个框架<br>
构建完成后，您将看到Finder与其中的Framework一起打开。</p>
<h3 id="注意-如果出现以下错误">注意：-如果出现以下错误，</h3>
<p>… Reason: image not found</p>
<p>确保在嵌入式二进制文件和链接的框架和库中都添加了框架</p>
<figure data-type="image" tabindex="8"><img src="https://upload-images.jianshu.io/upload_images/2230644-e9ad89e0621eb7aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图11" loading="lazy"></figure>
<figure data-type="image" tabindex="9"><img src="https://upload-images.jianshu.io/upload_images/2230644-4c80f0d7077a743c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图12" loading="lazy"></figure>
]]></summary>
        <content type="html"><![CDATA[<p>Swift已成为一种流行的编程语言，并且每天都在发展。<br>
开发Swift框架具有以下优点。<br>
隐藏您的代码实现。<br>
由于.framework文件已经编译，因此将减少重新编译并节省开发时间。<br>
这就是苹果公司使用的，例如：UIKit.framework。<br>
那么，您在寻找什么？让我们现在开始开发自己的Swift框架。</p>
<h3 id="开发swift框架具有以下优点">开发Swift框架具有以下优点。</h3>
<p>1、隐藏您的代码实现。<br>
2、由于.framework文件已经编译，因此将减少重新编译并节省开发时间。</p>
<p>这就是苹果公司使用的，例如：UIKit.framework。<br>
那么，您在寻找什么？让我们现在开始开发自己的Swift框架。<br>
使用的工具：XCode 11.6 +，Swift 5.1+<br>
步骤1：-安装框架项目</p>
<h5 id="1-创建新的xcode项目">1、创建新的XCode项目。</h5>
<figure data-type="image" tabindex="1"><img src="https://upload-images.jianshu.io/upload_images/2230644-032c56f68cbd7259.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图1" loading="lazy"></figure>
<p>#####2、 创建框架</p>
<figure data-type="image" tabindex="2"><img src="https://upload-images.jianshu.io/upload_images/2230644-b5c2237442f89f46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图2" loading="lazy"></figure>
<h6 id="为您的项目命名我们使用了类似于alamofire的alamowater名字-请确保选择语言-swift">为您的项目命名，我们使用了类似于Alamofire的AlamoWater名字。 （请确保选择语言-Swift）</h6>
<figure data-type="image" tabindex="3"><img src="https://upload-images.jianshu.io/upload_images/2230644-310af98148bbebd6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图3" loading="lazy"></figure>
<h6 id="单击目标内的alamowater文件夹然后按n">单击目标内的AlamoWater文件夹，然后按⌘+N。</h6>
<p>######选择文件名AlamoWater和以下子类：NSObject</p>
<figure data-type="image" tabindex="4"><img src="https://upload-images.jianshu.io/upload_images/2230644-9ba7d8e32b55ae48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图4" loading="lazy"></figure>
<p>在<strong>AlameWater.swift中</strong>添加以下代码**。**</p>
<p>**注意：-**确保您的类和方法设置为Public</p>
<pre><code>import UIKit

public protocol AlamoWaterProtocol {
    func didCallHello()
}

open class AlamoWater: NSObject {
    public static let shared = AlamoWater()
    
    public var delegate:AlamoWaterProtocol?
    
    open func hello(){
        debugPrint(&quot;Hello from AlamoWater!&quot;)
        AlamoWater.shared.delegate?.didCallHello()
    }
}

</code></pre>
<h6 id="要为ios设备和模拟器创建框架请向您的项目添加新的aggregate目标">要为iOS设备和模拟器创建框架，请向您的项目添加新的Aggregate目标。</h6>
<figure data-type="image" tabindex="5"><img src="https://upload-images.jianshu.io/upload_images/2230644-b618f5794d59501f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图5" loading="lazy"></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/2230644-4ae67e6fe40d2065.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图6" loading="lazy"><br>
<img src="https://upload-images.jianshu.io/upload_images/2230644-c19d65eb2e3295f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图7" loading="lazy"></p>
<figure data-type="image" tabindex="6"><img src="https://upload-images.jianshu.io/upload_images/2230644-29cf3ac7b2152920.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图8" loading="lazy"></figure>
<p>并添加[<strong>运行脚本</strong>]</p>
<figure data-type="image" tabindex="7"><img src="https://upload-images.jianshu.io/upload_images/2230644-d718d2788e1d1c54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图10" loading="lazy"></figure>
<pre><code>#!/bin/sh

UNIVERSAL_OUTPUTFOLDER=${BUILD_DIR}/${CONFIGURATION}-universal

# make sure the output directory exists
mkdir -p &quot;${UNIVERSAL_OUTPUTFOLDER}&quot;

# Step 1. Build Device and Simulator versions
xcodebuild -target &quot;AlamoWater&quot; ONLY_ACTIVE_ARCH=NO -configuration ${CONFIGURATION} -sdk iphoneos  BUILD_DIR=&quot;${BUILD_DIR}&quot; BUILD_ROOT=&quot;${BUILD_ROOT}&quot; clean build
xcodebuild -target &quot;AlamoWater&quot; -configuration ${CONFIGURATION} -sdk iphonesimulator ONLY_ACTIVE_ARCH=NO BUILD_DIR=&quot;${BUILD_DIR}&quot; BUILD_ROOT=&quot;${BUILD_ROOT}&quot; clean build

# Step 2. Copy the framework structure (from iphoneos build) to the universal folder
cp -R &quot;${BUILD_DIR}/${CONFIGURATION}-iphoneos/AlamoWater.framework&quot; &quot;${UNIVERSAL_OUTPUTFOLDER}/&quot;

# Step 3. Copy Swift modules from iphonesimulator build (if it exists) to the copied framework directory
SIMULATOR_SWIFT_MODULES_DIR=&quot;${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/AlamoWater.framework/Modules/AlamoWater.swiftmodule/.&quot;
if [ -d &quot;${SIMULATOR_SWIFT_MODULES_DIR}&quot; ]; then
cp -R &quot;${SIMULATOR_SWIFT_MODULES_DIR}&quot; &quot;${UNIVERSAL_OUTPUTFOLDER}/AlamoWater.framework/Modules/AlamoWater.swiftmodule&quot;
fi

# Step 4. Create universal binary file using lipo and place the combined executable in the copied framework directory
lipo -create -output &quot;${UNIVERSAL_OUTPUTFOLDER}/AlamoWater.framework/AlamoWater&quot; &quot;${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/AlamoWater.framework/AlamoWater&quot; &quot;${BUILD_DIR}/${CONFIGURATION}-iphoneos/AlamoWater.framework/AlamoWater&quot;

# Step 5. Convenience step to copy the framework to the project's directory
cp -R &quot;${UNIVERSAL_OUTPUTFOLDER}/AlamoWater.framework&quot; &quot;${PROJECT_DIR}&quot;

# Step 6. Convenience step to open the project's directory in Finder
open &quot;${PROJECT_DIR}&quot;
</code></pre>
<h3 id="注意alamowater改为自己项目的名字">注意：AlamoWater改为自己项目的名字</h3>
<p>通过按⌘+ B选择UniversalAlamoWater目标来构建您的第一个框架<br>
构建完成后，您将看到Finder与其中的Framework一起打开。</p>
<h3 id="注意-如果出现以下错误">注意：-如果出现以下错误，</h3>
<p>… Reason: image not found</p>
<p>确保在嵌入式二进制文件和链接的框架和库中都添加了框架</p>
<figure data-type="image" tabindex="8"><img src="https://upload-images.jianshu.io/upload_images/2230644-e9ad89e0621eb7aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图11" loading="lazy"></figure>
<figure data-type="image" tabindex="9"><img src="https://upload-images.jianshu.io/upload_images/2230644-4c80f0d7077a743c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图12" loading="lazy"></figure>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go实战项目【一】Golang和Gin框架的安装和使用]]></title>
        <id>https://shineyanggod.github.io/post/go-shi-zhan-xiang-mu-yi-golang-he-gin-kuang-jia-de-an-zhuang-he-shi-yong/</id>
        <link href="https://shineyanggod.github.io/post/go-shi-zhan-xiang-mu-yi-golang-he-gin-kuang-jia-de-an-zhuang-he-shi-yong/">
        </link>
        <updated>2020-10-15T02:13:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="golang的安装">Golang的安装</h3>
<p>根据所使用的电脑操作系统，下载相对应的版本<a href="https://studygolang.com/dl">Golang</a> 下载<br>
比如我的电脑是macOS系统，下载的是</p>
<figure data-type="image" tabindex="1"><img src="https://shineyanggod.github.io//post-images/1602728774979.png" alt="" loading="lazy"></figure>
<p>安装完毕后配置路径<br>
打开终端，执行:</p>
<pre><code>vi ~/.bash_profile 
</code></pre>
<p><code>.bash_profile</code> 添加的内容如下：</p>
<pre><code>#Go
export GOROOT=/usr/local/go
export PATH=$PATH:$GOROOT/bin
</code></pre>
<p>然后执行</p>
<pre><code>source ~/.bash_profile 
</code></pre>
<p>让配置生效<br>
执行</p>
<pre><code>go version
</code></pre>
<p>查看Golang是否安装成功，出现以下信息即为安装成功<br>
<img src="https://shineyanggod.github.io//post-images/1602729021295.png" alt="" loading="lazy"></p>
<h4 id="初始化项目目录">初始化项目目录</h4>
<p>选一个你自己喜欢的路径，创建一个文件夹，比如我的是/Users/newmac/Documents/Go-app这个文件夹下</p>
<pre><code>cd /Users/newmac/Documents/Go-app
mkdir api &amp;&amp; cd api
go env -w GO111MODULE=on
go env -w GOPROXY=https://goproxy.cn,direct
go mod init api
</code></pre>
<p><code>mkdir api &amp;&amp; cd api</code>：创建并进入api文件夹<br>
<code>go env -w GO111MODULE=on</code>：开启Go modules<br>
<code>go env -w GOPROXY=https://goproxy.cn,direct</code>：设置 GOPROXY 代理，也可以把GOPROXY写入<code>.bash_profile</code>中<br>
<code>go mod init [MODULE_PATH]</code>：初始化 Go modules，它将会生成 go.mod 文件，MODULE_PATH 填写的是模块引入路径，如果想要把项目放到Github上，可以填写GitHub的项目路径，这个根据自己情况填写。<br>
然后就会在api文件夹下出现go.mod文件<br>
<img src="https://shineyanggod.github.io//post-images/1602729136409.png" alt="" loading="lazy"></p>
<h4 id="安装gin框架">安装Gin框架</h4>
<p>在<code>api</code>文件夹下，执行</p>
<pre><code>go get -u github.com/gin-gonic/gin
</code></pre>
<p>安装完毕后，创建一个<code>test.go</code>文件，测试下Gin框架是否能使用<code>test.go</code><br>
<img src="https://shineyanggod.github.io//post-images/1602729230872.png" alt="" loading="lazy"></p>
<p><mark>我用的是GoLang开发工具，可以直接在编译器里面执行</mark></p>
<p>如果用的是VS code，可以在终端运行:<code>go run test.go</code><br>
在浏览器打开127.0.0.1:8080/ping这个地址，可以看到有返回的数据，代表Gin框架安装和使用成功。<br>
<img src="https://shineyanggod.github.io//post-images/1602729526136.png" alt="" loading="lazy"></p>
<h2 id="go相关学习知识"><a href="https://wizardforcel.gitbooks.io/go42/content/content/42_1_install.html">Go相关学习知识</a></h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[清理Xcode占用的Mac硬盘空间]]></title>
        <id>https://shineyanggod.github.io/post/qing-li-xcode-zhan-yong-de-mac-ying-pan-kong-jian/</id>
        <link href="https://shineyanggod.github.io/post/qing-li-xcode-zhan-yong-de-mac-ying-pan-kong-jian/">
        </link>
        <updated>2020-09-25T01:30:13.000Z</updated>
        <content type="html"><![CDATA[<p>主要是操作两个目录下的文件 ~/Library/Developer/Xcode 和 ~/Library/Developer/CoreSimulator</p>
<h3 id="~librarydeveloperxcode">~/Library/Developer/Xcode</h3>
<h4 id="1-deriveddata">1、DerivedData</h4>
<pre><code>此文件夹内的每个目录是Xcode运行每个APP时生成的缓存文件，删除之后再运行APP会重新生成该APP对应的文件，只是编译时间变长了。
可保留近期运行的APP相关的文件夹，对于以前运行过近期不再使用的APP，例如网上下载的demo，建议清理。
Archives
此文件夹中的内容对应Xcode-&gt;Window-&gt;Organizer-&gt;Archives中列出的打包文件。
可保留有用的打包文件，其它删除。
iOS DeviceSupport
此文件夹存放的是Xcode对你所连接真机的版本支持，每个文件夹几乎都是几个G的大小（我个人的情况是11个目录占了26G空间），手机每升级一个版本，再次连接Xcode时，这里都会生成一个目录。
建议保留你手机当前版本的文件夹。全部删除也没关系，手机再次连接Xcode时会重新生成。
</code></pre>
<h4 id="2-~librarydevelopercoresimulator">2. ~/Library/Developer/CoreSimulator</h4>
<pre><code>Devices
此文件夹下的目录是以模拟器的UDID命名的，运行模拟器时每安装一个新的APP，相应的文件夹内容也会增大，就像手机上安装应用会占用手机空间一样。
</code></pre>
<p>可删除全部文件夹。再次运行模拟器，会重新生成。<br>
删除后开启Xcode运行模拟器，可能会出现下面的错误，不要惊慌，重启Xcode就好了。<br>
<img src="https://shineyanggod.github.io//post-images/1600997815748.png" alt="" loading="lazy"></p>
<p><mark>建议在退出Xcode后进行清理，清理后重启电脑</mark></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[iOS 13：Swift以编程方式设置应用程序根视图控制器不起作用]]></title>
        <id>https://shineyanggod.github.io/post/ios-13swift-yi-bian-cheng-fang-shi-she-zhi-ying-yong-cheng-xu-gen-shi-tu-kong-zhi-qi-bu-qi-zuo-yong/</id>
        <link href="https://shineyanggod.github.io/post/ios-13swift-yi-bian-cheng-fang-shi-she-zhi-ying-yong-cheng-xu-gen-shi-tu-kong-zhi-qi-bu-qi-zuo-yong/">
        </link>
        <updated>2020-09-21T05:54:11.000Z</updated>
        <content type="html"><![CDATA[<p>在iOS以后直接使用window?.makeKeyAndVisible()是不起作用的，正确用法是:</p>
<pre><code>static func redirectToMainNavRVC(currentVC: UIViewController){
        let appDelegate = UIApplication.shared.delegate as! AppDelegate
        let vc = UIStoryboard(name: appDelegate.storyBoardName, bundle: nil).instantiateViewController(withIdentifier: &quot;MainNavigationViewController&quot;) as! MainNavigationViewController
    if #available(iOS 13.0, *){
        if let scene = UIApplication.shared.connectedScenes.first{
            guard let windowScene = (scene as? UIWindowScene) else { return }
            print(&quot;&gt;&gt;&gt; windowScene: \(windowScene)&quot;)
            let window: UIWindow = UIWindow(frame: windowScene.coordinateSpace.bounds)
            window.windowScene = windowScene //Make sure to do this
            window.rootViewController = vc
            window.makeKeyAndVisible()
            appDelegate.window = window
        }
    } else {
        appDelegate.window?.rootViewController = vc
        appDelegate.window?.makeKeyAndVisible()
    }
}
</code></pre>
]]></content>
    </entry>
</feed>