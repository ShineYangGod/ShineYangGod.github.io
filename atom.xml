<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://shineyanggod.github.io/</id>
    <title>ShineYang</title>
    <updated>2020-09-25T01:38:13.544Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://shineyanggod.github.io/"/>
    <link rel="self" href="https://shineyanggod.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://shineyanggod.github.io/images/avatar.png</logo>
    <icon>https://shineyanggod.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, ShineYang</rights>
    <entry>
        <title type="html"><![CDATA[清理Xcode占用的Mac硬盘空间]]></title>
        <id>https://shineyanggod.github.io/post/qing-li-xcode-zhan-yong-de-mac-ying-pan-kong-jian/</id>
        <link href="https://shineyanggod.github.io/post/qing-li-xcode-zhan-yong-de-mac-ying-pan-kong-jian/">
        </link>
        <updated>2020-09-25T01:30:13.000Z</updated>
        <summary type="html"><![CDATA[<p>主要是操作两个目录下的文件 ~/Library/Developer/Xcode 和 ~/Library/Developer/CoreSimulator</p>
<h3 id="~librarydeveloperxcode">~/Library/Developer/Xcode</h3>
]]></summary>
        <content type="html"><![CDATA[<p>主要是操作两个目录下的文件 ~/Library/Developer/Xcode 和 ~/Library/Developer/CoreSimulator</p>
<h3 id="~librarydeveloperxcode">~/Library/Developer/Xcode</h3>
<!-- more -->
<h4 id="1-deriveddata">1、DerivedData</h4>
<blockquote>
<p>此文件夹内的每个目录是Xcode运行每个APP时生成的缓存文件，删除之后再运行APP会重新生成该APP对应的文件，只是编译时间变长了。<br>
可保留近期运行的APP相关的文件夹，对于以前运行过近期不再使用的APP，例如网上下载的demo，建议清理。<br>
Archives<br>
此文件夹中的内容对应Xcode-&gt;Window-&gt;Organizer-&gt;Archives中列出的打包文件。<br>
可保留有用的打包文件，其它删除。<br>
iOS DeviceSupport<br>
此文件夹存放的是Xcode对你所连接真机的版本支持，每个文件夹几乎都是几个G的大小（我个人的情况是11个目录占了26G空间），手机每升级一个版本，再次连接Xcode时，这里都会生成一个目录。<br>
建议保留你手机当前版本的文件夹。全部删除也没关系，手机再次连接Xcode时会重新生成。</p>
</blockquote>
<h4 id="2-~librarydevelopercoresimulator">2. ~/Library/Developer/CoreSimulator</h4>
<blockquote>
<p>Devices<br>
此文件夹下的目录是以模拟器的UDID命名的，运行模拟器时每安装一个新的APP，相应的文件夹内容也会增大，就像手机上安装应用会占用手机空间一样。<br>
可删除全部文件夹。再次运行模拟器，会重新生成。<br>
删除后开启Xcode运行模拟器，可能会出现下面的错误，不要惊慌，重启Xcode就好了。<br>
<img src="https://shineyanggod.github.io//post-images/1600997815748.png" alt="" loading="lazy"></p>
</blockquote>
<h1 id="建议在退出xcode后进行清理清理后重启电脑">建议在退出Xcode后进行清理，清理后重启电脑。</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[iOS 13：Swift以编程方式设置应用程序根视图控制器不起作用]]></title>
        <id>https://shineyanggod.github.io/post/ios-13swift-yi-bian-cheng-fang-shi-she-zhi-ying-yong-cheng-xu-gen-shi-tu-kong-zhi-qi-bu-qi-zuo-yong/</id>
        <link href="https://shineyanggod.github.io/post/ios-13swift-yi-bian-cheng-fang-shi-she-zhi-ying-yong-cheng-xu-gen-shi-tu-kong-zhi-qi-bu-qi-zuo-yong/">
        </link>
        <updated>2020-09-21T05:54:11.000Z</updated>
        <content type="html"><![CDATA[<p>在iOS以后直接使用window?.makeKeyAndVisible()是不起作用的，正确用法是:</p>
<pre><code>static func redirectToMainNavRVC(currentVC: UIViewController){
        let appDelegate = UIApplication.shared.delegate as! AppDelegate
        let vc = UIStoryboard(name: appDelegate.storyBoardName, bundle: nil).instantiateViewController(withIdentifier: &quot;MainNavigationViewController&quot;) as! MainNavigationViewController
    if #available(iOS 13.0, *){
        if let scene = UIApplication.shared.connectedScenes.first{
            guard let windowScene = (scene as? UIWindowScene) else { return }
            print(&quot;&gt;&gt;&gt; windowScene: \(windowScene)&quot;)
            let window: UIWindow = UIWindow(frame: windowScene.coordinateSpace.bounds)
            window.windowScene = windowScene //Make sure to do this
            window.rootViewController = vc
            window.makeKeyAndVisible()
            appDelegate.window = window
        }
    } else {
        appDelegate.window?.rootViewController = vc
        appDelegate.window?.makeKeyAndVisible()
    }
}
</code></pre>
]]></content>
    </entry>
</feed>